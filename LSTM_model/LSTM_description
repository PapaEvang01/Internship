LSTM-Based Time Series Forecasting – Cooling Loads (2023)

=== Introduction ===
The Long Short-Term Memory (LSTM) network is a specialized type of Recurrent Neural Network (RNN)
designed for time series and sequential data processing. It addresses the "short-term memory"
limitations of classic RNNs, making it ideal for learning long-term dependencies and capturing
seasonal or periodic trends.

In this project, an LSTM model is trained to forecast cooling energy consumption using historical
data from 2023, measured at 15-minute intervals. The model is capable of learning:

- How past consumption patterns influence current load
- Complex, nonlinear temporal structures
- Seasonal variations even without external features (e.g., weather)

=== Theoretical Basis ===
Each LSTM unit consists of internal mechanisms called "gates" that regulate information flow:

- **Cell State (C)**: Preserves long-term memory
- **Forget Gate (f)**: Filters out irrelevant information
- **Input Gate (i)**: Decides what new information to store
- **Output Gate (o)**: Determines what to output based on memory

These components interact mathematically to balance memory retention and forgetting.

=== Advantages and Limitations ===

Advantages:
- Learns long-term dependencies
- Handles nonlinear and seasonal data well
- Robust forecasting performance
- Outperforms simple RNNs in most time series tasks

Limitations:
- Higher computational cost
- Needs more data for effective training
- Longer training time and tuning effort
- Sensitive to hyperparameters

=== Forecasting Results – Cooling Loads (December 2023) ===

This section summarizes the LSTM model’s performance in forecasting cooling energy loads
for December 2023.

**Model Workflow:**
- Loads Excel dataset with 35,040 entries (15-minute intervals for full year)
- Splits into training (Jan–Nov: 32,065 records) and testing (Dec: 2,975 records)
- Applies Min-Max normalization
- Constructs input sequences using historical time steps
- Trains LSTM for 20 epochs with zero-sensitive loss
- Saves model as `cooling_lstm_fullmodel.pth`
- Forecasts December and evaluates predictions

**Evaluation Metrics:**
- MAE: 0.065 kWh → Very low average error
- RMSE: 0.167 kWh → Stable performance across the test set
- R² Score: 0.938 → Explains 93.8% of variance in true values
- MAPE: ~1.6e15% → Distorted by near-zero ground truth values

*Note:* For reliable MAPE, exclude records where ground truth < 0.1 kWh.

**Commentary:**
- The model captures daily and weekly consumption trends
- Performs well without using weather data (purely historical kWh)
- Future improvements could include multivariate inputs (e.g., temperature)

=== Visualization Outputs ===

- `cooling_december_prediction.png`: Actual vs Predicted loads (Dec only)
- `full_year_with_december_overlay.png`: Full 2023 + Dec forecast highlight
- `cooling_actual_full_year.png`: Real load data for all of 2023 (for trend analysis)

=== Input Dataset – Cooling Load (2023) ===

- Format: Excel `.xlsx`
- Time Resolution: 15-minute intervals
- Period: Jan 1, 2023 – Dec 31, 2023
- Total Records: 35,040
- Columns:
  1. **Timestamp** (e.g., "1/1/23 0:00")
  2. **Cooling Load (kWh)** – European decimal format (e.g., "0,08")

Convert all kWh strings from "0,08" → "0.08" before processing.

**Sample Data:**
| Timestamp     | kWh  |
|---------------|------|
| 1/1/23 0:00   | 0,08 |
| 1/1/23 0:15   | 0,05 |
| 1/1/23 0:30   | 0,05 |
| 1/1/23 0:45   | 0,04 |
| 1/1/23 1:00   | 0,07 |
| ...           | ...  |

=== Additional Notes ===
- Visualizations are generated using `matplotlib` before and after model training
- Ensure correct datetime parsing and float conversion for accurate results
- The LSTM pipeline is implemented in Python with Keras/TensorFlow

=== Conclusion ===
This project demonstrates the effectiveness of LSTM in forecasting seasonal energy consumption.
With a high R² and low RMSE, the model captures both short-term fluctuations and long-term
patterns in cooling load behavior. It provides a strong foundation for integrating energy forecasting
into smart grid systems and energy-efficient building management.

Author: [Your Name]
